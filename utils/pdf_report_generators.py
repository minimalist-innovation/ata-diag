from datetime import datetime

import pandas as pd
import streamlit as st


def render_streamlit_report(session_state):
    """Render diagnostic report as a Streamlit page instead of PDF."""

    stage_name = session_state['growth_stage_name']
    annual_revenue = session_state['annual_revenue']
    pillars_data = session_state['pillars_data']

    st.title("Adaptive Traction Architecture Diagnostic Report")
    st.caption(f"Generated on: {datetime.now().strftime('%Y-%m-%d')}")
    st.caption("Generated by: Minimalist Innovation")

    st.markdown("## Company Information")
    st.markdown(f"- **SaaS Company type**: {session_state['selected_saas_type']}")
    st.markdown(f"- **SaaS Company Orientation**: {session_state['selected_orientation']}")
    st.markdown(f"- **Primary Industry/Sector**: {session_state['selected_industry']}")
    st.markdown(f"- **Estimated Annual Recurring Revenue (ARR)**: ${annual_revenue:.2f}M")
    st.markdown(f"- **Company Stage**: {stage_name}")

    st.markdown("---")

    # Render each pillar
    for pillar_key, pillar_data in pillars_data.items():
        pillar_name = pillar_data['pillar_name']
        st.subheader(f"Pillar: {pillar_name}")

        # Collect metric data
        metrics_table = []
        for metric_name, metric in session_state["metrics_cache"].items():
            if metric['pillar_name'] == pillar_name:
                value = session_state[metric["slider_key"]]
                formatted_value = metric["slider_format"] % value
                target_range = f"{metric['target_low_range']} - {metric['target_high_range']} {metric['unit']}"
                metrics_table.append({
                    "Metric Name": metric_name,
                    "Metric Value": formatted_value,
                    "Target Range": target_range
                })

        if metrics_table:
            df = pd.DataFrame(metrics_table)
            st.table(df)

            # Show insights/diagnoses
            for row in metrics_table:
                val_str = row["Metric Value"]
                try:
                    val = float(val_str.rstrip("%"))  # Handle if it's a percentage
                except ValueError:
                    continue

                range_parts = row["Target Range"].split(" ")
                low_val = float(range_parts[0])
                high_val = float(range_parts[2])

                if val <= low_val or val >= high_val:
                    metric_name = row["Metric Name"]
                    blog_link = session_state['metrics_cache'][metric_name]['blog_link']
                    st.markdown(
                        f"""
                        ðŸš¨ **{row['Metric Name']}** value **{row['Metric Value']}** is **outside** the ideal range of **{row['Target Range']}**.  
                        ðŸ‘‰ [**Review this metric**]({blog_link}) for insights and improvement opportunities.
                        """,
                        unsafe_allow_html=True
                    )
        st.markdown("---")

# def setup_report_style(buffer):

#     # Define colors  
#     doc = SimpleDocTemplate(
#                 buffer, 
#                 pagesize=letter,
#                 rightMargin=0.75*inch,
#                 leftMargin=0.75*inch,
#                 topMargin=0.75*inch,
#                 bottomMargin=0.75*inch
#         )
#     styles = getSampleStyleSheet()

#     # Custom styles
#     styles.add(
#             ParagraphStyle(
#                 name='RTitle',
#                 parent=styles['Heading1'],
#                 fontSize=20,
#                 textColor=primary_color,
#                 spaceAfter=12,
#                 alignment=TA_CENTER
#             )
#     )

#     styles.add(
#             ParagraphStyle(
#                 name='RSubtitle',
#                 parent=styles['Heading2'],
#                 fontSize=14,
#                 textColor=primary_color,
#                 spaceAfter=10,
#                 alignment=TA_CENTER
#             )
#     )

#     styles.add(
#             ParagraphStyle(
#                 name='PillarHeading',
#                 parent=styles['Heading2'],
#                 fontSize=16,
#                 textColor=primary_color,
#                 spaceAfter=10,
#                 spaceBefore=15
#             )
#     )

#     styles.add(
#             ParagraphStyle(
#                 name='CompanyInfo',
#                 parent=styles['Normal'],
#                 fontSize=12,
#                 spaceBefore=5,
#                 spaceAfter=6,
#                 alignment=TA_LEFT
#             )
#     )

#     styles.add(
#             ParagraphStyle(
#                 name='RNormal',
#                 parent=styles['Normal'],
#                 fontSize=12,
#                 spaceBefore=5,
#                 spaceAfter=6
#             )
#     )

#     return doc, styles


# def generate_pdf_report(session_state):
#     """ generate PDF report format from given metrics data"""
#     stage_name = session_state['growth_stage_name']
#     annual_revenue = session_state['annual_revenue']
#     pillars_data = session_state['pillars_data']
#     buffer = io.BytesIO()
#     doc, styles = setup_report_style(buffer)

#     # Build the PDF content
#     content = []

#     # Report header
#     content.append(Paragraph("Adaptive Traction Architecture Diagnostic Report", styles['RTitle']))
#     content.append(Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d')}", styles['RSubtitle']))
#     content.append(Paragraph(f"Generated by: Minimalist Innovation", styles['RSubtitle']))
#     content.append(Spacer(1, 0.25*inch))

#     # Company Info
#     company_info = [
#         f"Saas Company type: <b>{session_state["selected_saas_type"]}</b>",
#         f"Saas Company Orientation: <b>{session_state["selected_orientation"]}</b>",
#         f"Primary Industry/Sector: <b>{session_state["selected_industry"]}</b>",
#         f"Your estimated Annual Recurring Revenue (ARR): <b>${annual_revenue:.2f}M</b>",
#         f"Company Stage: <b>{stage_name}</b>"
#     ]

#     for info in company_info:
#         content.append(Paragraph(info, styles['CompanyInfo']))
#     content.append(Spacer(1, 0.5*inch))

#     pillars_name = []
#     for name in pillars_data.values():
#         pillars_name.append(name['pillar_name'])

#     # Collecting metrics data for every pillar and appending into PDF report
#     for pillar_name in pillars_name:
#         # content.append(Paragraph(f"Pillar: {pillar_name}"))
#         content.append(Paragraph(f"Pillar: {pillar_name}", styles['PillarHeading']))

#         metric_info = [["Metric Name", "Metric Value", "Target Range"]]

#         for metric_name in session_state["metrics_cache"].keys():
#             metric = session_state["metrics_cache"][metric_name]
#             if metric['pillar_name'] == pillar_name:
#                 metric_info.append([metric_name, metric["slider_format"] % session_state[metric["slider_key"]], f"{metric['target_low_range']} - {metric['target_high_range']} {metric['unit']}" ])

#         # content.append(create_table(metric_info))
#         content.append(KeepTogether([create_table(metric_info), Spacer(1, 0.25*inch)]))
#         content.append(Spacer(1, 0.1*inch))

#         # check if metric value within expected range otherwise provide diagnosis.
#         for info in metric_info[1:]:
#             metric_name = info[0]
#             low_val = float(info[2].split(" ")[0])
#             high_val = float(info[2].split(" ")[2])
#             if float(info[1][:-1]) <= low_val or float(info[1][:-1]) >= high_val:
#                 content.append(Paragraph(
#                         f"""
#                             <b>{info[0]}</b> value <b>{info[1]}</b>, is out of the ideal range of <b>{info[2]}</b>. 
#                             To gain insights into this metric and explore opportunties for improvement...
#                             <a href="{session_state['metrics_cache'][metric_name]['blog_link']}" color="{primary_color}"><b>Review</b></a>
#                         """,
#                         styles['RNormal']
#                 ))
#                 content.append(Spacer(1, 0.1*inch))

#     # Build the PDF
#     doc.build(content)
#     buffer.seek(0)
#     return buffer

# def create_table(data):
#     table_style = TableStyle([
#         # Header row
#         ('BACKGROUND', (0, 0), (-1, 0), primary_color),
#         ('TEXTCOLOR', (0, 0), (-1, 0), white_text),
#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
#         ('FONTSIZE', (0, 0), (-1, 0), 12),
#         ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
#         ('TOPPADDING', (0, 0), (-1, 0), 8),

#         # Data rows
#         ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
#         ('FONTSIZE', (0, 1), (-1, -1), 10),
#         ('TEXTCOLOR', (0, 1), (-1, -1), black_text),
#         ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
#         ('TOPPADDING', (0, 1), (-1, -1), 6),

#         # Border
#         ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
#         ('BOX', (0, 0), (-1, -1), 1, colors.black),

#         # Alternating row colors for better readability
#         ('BACKGROUND', (0, 1), (-1, -1), colors.white),
#         ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.whitesmoke, colors.white])
#     ])

#     table = Table(data, colWidths=[3*inch, 1.5*inch, 2.5*inch])
#     table.setStyle(table_style)
#     return table
