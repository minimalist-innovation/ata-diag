from datetime import datetime

import pandas as pd
import streamlit as st


def render_streamlit_report(session_state):
    """Render diagnostic report as a Streamlit page instead of PDF."""

    stage_name = session_state['growth_stage_name']
    annual_revenue = session_state['annual_revenue']
    pillars_data = session_state['pillars_data']

    st.title("Adaptive Traction Architecture Diagnostic Report")
    st.caption(f"Generated on: {datetime.now().strftime('%Y-%m-%d')}")
    st.caption("Generated by: Minimalist Innovation")

    st.markdown("## Company Information")
    st.markdown(f"- **SaaS Company type**: {session_state['selected_saas_type']}")
    st.markdown(f"- **SaaS Company Orientation**: {session_state['selected_orientation']}")
    st.markdown(f"- **Primary Industry/Sector**: {session_state['selected_industry']}")
    st.markdown(f"- **Estimated Annual Recurring Revenue (ARR)**: ${annual_revenue:.2f}M")
    st.markdown(f"- **Company Stage**: {stage_name}")

    st.markdown("---")

    # Render each pillar
    for pillar_key, pillar_data in pillars_data.items():
        pillar_name = pillar_data['pillar_name']
        st.subheader(f"Pillar: {pillar_name}")

        # Collect metric data
        metrics_table = []
        for metric_name, metric in session_state["metrics_cache"].items():
            if metric['pillar_name'] == pillar_name:
                value = session_state[metric["slider_key"]]
                formatted_value = metric["slider_format"] % value
                target_range = f"{metric['target_low_range']} - {metric['target_high_range']} {metric['unit']}"
                metrics_table.append({
                    "Metric Name": metric_name,
                    "Metric Value": formatted_value,
                    "Target Range": target_range
                })

        if metrics_table:
            df = pd.DataFrame(metrics_table)
            st.dataframe(df, hide_index=True)

            # Show insights/diagnoses
            for row in metrics_table:
                val_str = row["Metric Value"]
                try:
                    val = float(val_str.rstrip("%"))  # Handle if it's a percentage
                except ValueError:
                    continue

                range_parts = row["Target Range"].split(" ")
                low_val = float(range_parts[0])
                high_val = float(range_parts[2])

                if val <= low_val or val >= high_val:
                    condition = "lower than" if val <= low_val else "higher than"
                    metric_name = row["Metric Name"]
                    key_takeaways = "<br>".join(f"""&nbsp; **â€¢** {st}""" for st in session_state['metrics_cache'][metric_name]['key_takeaways'].split("."))
                    st.markdown(
                        f"""
                        ðŸš¨ **{row['Metric Name']}** value **{row['Metric Value']}** is **{condition}** the ideal range of **{row['Target Range']}**. 
                        """,
                        unsafe_allow_html=True
                    )
                    st.markdown(
                        f"""
                            &nbsp; ðŸ§¬ **Strategies to Fix** <br>
                            {key_takeaways}
                    """, unsafe_allow_html=True
                    )
                    st.markdown(
                        f"""
                        &nbsp; ðŸŽ¥ [**Watch this quick video**]({session_state['metrics_cache'][metric_name]['blog_link']}) OR ðŸ“Š [**Review this article**]({session_state['metrics_cache'][metric_name]['blog_link']}) for insights and improvement opportunities.
                        """, unsafe_allow_html=True
                    )
        st.markdown("---")